@startuml

title __CUSTOMFILTERS's Class Diagram__\n

  namespace gr.ds.unipi.noda.api.hbase {
    namespace filterOperator.geoperators.geographicalOperators {
      namespace customFilters {
        class gr.ds.unipi.noda.api.hbase.filterOperator.geoperators.geographicalOperators.customFilters.CircleFilter {
            - columnFamily : byte[]
            - filterRow : boolean
            - latitude : double
            - latitudeColumnQualifier : byte[]
            - longitude : double
            - longitudeColumnQualifier : byte[]
            - radius : double
            + filterCell()
            + filterRow()
            {static} + newCircleFilter()
            {static} + parseFrom()
            + reset()
            + toByteArray()
            - CircleFilter()
            - contains()
            - haversine()
        }
      }
    }
  }
  

  namespace gr.ds.unipi.noda.api.hbase {
    namespace filterOperator.geoperators.geographicalOperators {
      namespace customFilters {
        class gr.ds.unipi.noda.api.hbase.filterOperator.geoperators.geographicalOperators.customFilters.PolygonFilter {
            - columnFamily : byte[]
            - coordinates : List<Coordinates>
            - filterRow : boolean
            - latitude : double
            - latitudeColumnQualifier : byte[]
            - longitude : double
            - longitudeColumnQualifier : byte[]
            + filterCell()
            + filterRow()
            {static} + newPolygonFilter()
            {static} + parseFrom()
            + reset()
            + toByteArray()
            - PolygonFilter()
            - contains()
        }
      }
    }
  }
  

  namespace gr.ds.unipi.noda.api.hbase {
    namespace filterOperator.geoperators.geographicalOperators {
      namespace customFilters {
        class gr.ds.unipi.noda.api.hbase.filterOperator.geoperators.geographicalOperators.customFilters.RectangleFilter {
            - columnFamily : byte[]
            - filterRow : boolean
            - latitude : double
            - latitudeColumnQualifier : byte[]
            - longitude : double
            - longitudeColumnQualifier : byte[]
            + filterCell()
            + filterRow()
            {static} + newRectangleFilter()
            {static} + parseFrom()
            + reset()
            + toByteArray()
            - RectangleFilter()
            - contains()
        }
      }
    }
  }
  

  gr.ds.unipi.noda.api.hbase.filterOperator.geoperators.geographicalOperators.customFilters.CircleFilter -up-|> org.apache.hadoop.hbase.filter.FilterBase
  gr.ds.unipi.noda.api.hbase.filterOperator.geoperators.geographicalOperators.customFilters.CircleFilter o-- gr.ds.unipi.noda.api.hbase.filterOperator.geoperators.geographicalOperators.customFilters.generated.CircleFilterProtos.CircleFilter.Coordinates : centerCoordinates
  gr.ds.unipi.noda.api.hbase.filterOperator.geoperators.geographicalOperators.customFilters.PolygonFilter -up-|> org.apache.hadoop.hbase.filter.FilterBase
  gr.ds.unipi.noda.api.hbase.filterOperator.geoperators.geographicalOperators.customFilters.RectangleFilter -up-|> org.apache.hadoop.hbase.filter.FilterBase
  gr.ds.unipi.noda.api.hbase.filterOperator.geoperators.geographicalOperators.customFilters.RectangleFilter o-- gr.ds.unipi.noda.api.hbase.filterOperator.geoperators.geographicalOperators.customFilters.generated.RectangleFilterProtos.RectangleFilter.Coordinates : lowerCoordinates
  gr.ds.unipi.noda.api.hbase.filterOperator.geoperators.geographicalOperators.customFilters.RectangleFilter o-- gr.ds.unipi.noda.api.hbase.filterOperator.geoperators.geographicalOperators.customFilters.generated.RectangleFilterProtos.RectangleFilter.Coordinates : upperCoordinates


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
